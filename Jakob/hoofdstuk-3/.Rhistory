p = pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
if(p < alpha){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= FALSE;
}
# -------------- Plotten van de gegevens --------------
x <- seq(populatieGem-4*standaardafwijking/sqrt(n), populatieGem+4*standaardafwijking/sqrt(n), length=200)
dist <- dt((x - populatieGem)/(standaardafwijking/sqrt(n)), df = n-1) * standaardafwijking/sqrt(n)
plot (x, dist, type = 'l', xlab = '', ylab = '')
i <- x >= g
dg <- dt((g- populatieGem)/(standaardafwijking/sqrt(n)),df=n-1) * standaardafwijking/sqrt(n)
polygon(c(g,x[i]),c(0,dist[i]), col = 'lightgreen')
abline(v=steekproefGem, col='red')
text(steekproefGem, mean(dist)*1.5, steekproefGem)
text(g,mean(dist)*0.5,signif(g, digits=4))
text (populatieGem, mean(dist) , populatieGem)
abline(v=populatieGem)
}
## tweezijdig
}else{
# ---------------- Kritieke grensgebied ---------------
print("Tweezijdig")
z = qt(1-alpha/2,df = n-1)
g1 = populatieGem - z * (standaardafwijking / sqrt(n))
g2 = populatieGem + z * (standaardafwijking / sqrt(n))
if(steekproefGem < g2  & steekproefGem > g1 ){
print("H0 niet verwerpen!")
print(paste("g1 (" ,g1,") <  steekproefgemiddelde (",steekproefGem,") < g2 (",g2,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print("Steekproefgemiddelde ligt niet tussen g1 en g2")
verwerpenKritiekgeb = TRUE;
}
# ----------- Overschrijdingskans (p-value) -----------
if(steekproefGem < populatieGem){
p = pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
}else{
p = 1 - pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
}
if(p < alpha/2){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde = TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde = FALSE;
}
# -------------- Plotten van de gegevens --------------
x = seq(populatieGem-4*standaardafwijking/sqrt(n), populatieGem+4*standaardafwijking/sqrt(n), length=200)
dist = dnorm(x, populatieGem, standaardafwijking/sqrt(n))
plot (x, dist, type = 'l', xlab = '', ylab = '')
title(main="T-test")
i <- x <= g2 & x >= g1
polygon(c(g1,x[i], g2),c(0,dist[i],0), col = 'lightgreen')
abline(v=steekproefGem, col='red')
text(steekproefGem, mean(dist)*1.5, steekproefGem)
text(g1,mean(dist)*0.5,signif(g1, digits=4))
text(g2,mean(dist)*0.5,signif(g2, digits=4))
text (populatieGem, mean(dist) , populatieGem)
abline(v=populatieGem)
}
## uitleg bij de grafiek.
title(main="T-test")
if( verwerpenKritiekgeb != verwerpenPWaarde ){
title(sub="ERROR", col.sub="red")
}else{
if(verwerpenKritiekgeb){
title(sub="H0 verwerpen!", col.sub="red")
}else{
title(sub="H0 niet verwerpen!", col.sub="green")
}
}
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ================================================= T-test# ================================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
# indien n > 30 --> z-toets!
n = 50
steekproefGem = 295
standaardafwijking = 20  # van de steekproef!!! Dus s en niet Ï !!!
alpha = 0.05
populatieGem =  300
# alternatief gem. <> populatiegem  --> soort = '<>'
soort = ''
# ---------------------------------------------- Berekeningen ----------------------------------------------
if(!soort == '<>'){
## eenzijdig rechts
if(steekproefGem > populatieGem){
print("eenzijdig rechts")
# ---------------- Kritieke grensgebied ---------------
z = qt(1-alpha,df=n-1)
g = populatieGem + z* (standaardafwijking / sqrt(n))
if(steekproefGem < g ){
print("H0 niet verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") < g (",g,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") > g (",g,") -> Steekproefgemiddelde ligt in verwerpingsgebied"))
verwerpenKritiekgeb = TRUE;
}
# ----------- Overschrijdingskans (p-value) -----------
p <- 1 - pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
if(p < alpha){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= FALSE;
}
# -------------- Plotten van de gegevens --------------
x <- seq(populatieGem-4*standaardafwijking/sqrt(n), populatieGem+4*standaardafwijking/sqrt(n), length=200)
dist <- dt((x - populatieGem)/(standaardafwijking/sqrt(n)), df = n-1) * standaardafwijking/sqrt(n)
plot (x, dist, type = 'l', xlab = '', ylab = '')
i <- x <= g
dg <- dt((g- populatieGem)/(standaardafwijking/sqrt(n)),df=n-1) * standaardafwijking/sqrt(n)
polygon(c(x[i], g, g),c(dist[i], dg, 0), col = 'lightgreen')
abline(v=steekproefGem, col='red')
text(steekproefGem, mean(dist)*1.5, steekproefGem)
text(g,mean(dist)*0.5,signif(g, digits=4))
text (populatieGem, mean(dist) , populatieGem)
abline(v=populatieGem)
}
##eenzijdig links
if(steekproefGem < populatieGem){
print("eenzijdig links")
# ---------------- Kritieke grensgebied ---------------
z = qt(1-alpha,df=n-1)
g = populatieGem - z * (standaardafwijking / sqrt(n))
if(steekproefGem > g ){
print("H0 niet verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") > g (",g,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") < g (",g,") -> Steekproefgemiddelde ligt in verwerpingsgebied"))
verwerpenKritiekgeb = TRUE;
}
# ----------- Overschrijdingskans (p-value) -----------
p = pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
if(p < alpha){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= FALSE;
}
# -------------- Plotten van de gegevens --------------
x <- seq(populatieGem-4*standaardafwijking/sqrt(n), populatieGem+4*standaardafwijking/sqrt(n), length=200)
dist <- dt((x - populatieGem)/(standaardafwijking/sqrt(n)), df = n-1) * standaardafwijking/sqrt(n)
plot (x, dist, type = 'l', xlab = '', ylab = '')
i <- x >= g
dg <- dt((g- populatieGem)/(standaardafwijking/sqrt(n)),df=n-1) * standaardafwijking/sqrt(n)
polygon(c(g,x[i]),c(0,dist[i]), col = 'lightgreen')
abline(v=steekproefGem, col='red')
text(steekproefGem, mean(dist)*1.5, steekproefGem)
text(g,mean(dist)*0.5,signif(g, digits=4))
text (populatieGem, mean(dist) , populatieGem)
abline(v=populatieGem)
}
## tweezijdig
}else{
# ---------------- Kritieke grensgebied ---------------
print("Tweezijdig")
z = qt(1-alpha/2,df = n-1)
g1 = populatieGem - z * (standaardafwijking / sqrt(n))
g2 = populatieGem + z * (standaardafwijking / sqrt(n))
if(steekproefGem < g2  & steekproefGem > g1 ){
print("H0 niet verwerpen!")
print(paste("g1 (" ,g1,") <  steekproefgemiddelde (",steekproefGem,") < g2 (",g2,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print("Steekproefgemiddelde ligt niet tussen g1 en g2")
verwerpenKritiekgeb = TRUE;
}
# ----------- Overschrijdingskans (p-value) -----------
if(steekproefGem < populatieGem){
p = pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
}else{
p = 1 - pt((steekproefGem - populatieGem) / (standaardafwijking/sqrt(n)), df = n-1)
}
if(p < alpha/2){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde = TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde = FALSE;
}
# -------------- Plotten van de gegevens --------------
x = seq(populatieGem-4*standaardafwijking/sqrt(n), populatieGem+4*standaardafwijking/sqrt(n), length=200)
dist = dnorm(x, populatieGem, standaardafwijking/sqrt(n))
plot (x, dist, type = 'l', xlab = '', ylab = '')
title(main="T-test")
i <- x <= g2 & x >= g1
polygon(c(g1,x[i], g2),c(0,dist[i],0), col = 'lightgreen')
abline(v=steekproefGem, col='red')
text(steekproefGem, mean(dist)*1.5, steekproefGem)
text(g1,mean(dist)*0.5,signif(g1, digits=4))
text(g2,mean(dist)*0.5,signif(g2, digits=4))
text (populatieGem, mean(dist) , populatieGem)
abline(v=populatieGem)
}
## uitleg bij de grafiek.
title(main="T-test")
if( verwerpenKritiekgeb != verwerpenPWaarde ){
title(sub="ERROR", col.sub="red")
}else{
if(verwerpenKritiekgeb){
title(sub="H0 verwerpen!", col.sub="red")
}else{
title(sub="H0 niet verwerpen!", col.sub="green")
}
}
knitr::opts_chunk$set(echo = TRUE)
breakingBad <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv")
breakingBad
regr <- lm(breakingBad$ID ~ breakingBad$UserRating)
regr
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv")
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ========================================== Lineaire regressie  ===========================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv")
afhankelijkeVar = data$ID
onafhanekelijkeVar = data$UserRating
# ---------------------------------------------- Berekeningen ----------------------------------------------
#Manier 1
# mx <- mean(onafhanekelijkeVar)  # gemiddelde van x
# my <- mean(afhankelijkeVar)  # gemiddelde van y
# xx <- onafhanekelijkeVar - mx   # x - mx
# yy <- afhankelijkeVar - my   # y - my
# beta_1 <- sum(xx * yy) / sum(xx^2)
# beta_0 <- my - beta_1 * mx
#
# plot(x = onafhanekelijkeVar, y = afhankelijkeVar,
#        xlab = "Protein content (%)",
#        ylab = "Weight gain (g)")
# abline(a = beta_0,  # snijpunt y-as
#        b = beta_1,  # richtingscoÃ«fficiÃ«nt
#        col = 'red')
#Manier 2
#AFHANKELIJK - ONAFHANKELIJK!
lm(afhankelijkeVar ~ onafhanekelijkeVar)
plot(x = onafhanekelijkeVar, xlab = "Protein content (%)",
y = afhankelijkeVar, ylab = "Weight gain (g)")
regression <- lm(afhankelijkeVar ~ onafhanekelijkeVar)
abline(regression,
col = 'red')
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ========================================== Lineaire regressie  ===========================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv")
afhankelijkeVar = data$ID
onafhanekelijkeVar = data$UserRating
# ---------------------------------------------- Berekeningen ----------------------------------------------
#Manier 1
# mx <- mean(onafhanekelijkeVar)  # gemiddelde van x
# my <- mean(afhankelijkeVar)  # gemiddelde van y
# xx <- onafhanekelijkeVar - mx   # x - mx
# yy <- afhankelijkeVar - my   # y - my
# beta_1 <- sum(xx * yy) / sum(xx^2)
# beta_0 <- my - beta_1 * mx
#
# plot(x = onafhanekelijkeVar, y = afhankelijkeVar,
#        xlab = "Protein content (%)",
#        ylab = "Weight gain (g)")
# abline(a = beta_0,  # snijpunt y-as
#        b = beta_1,  # richtingscoÃ«fficiÃ«nt
#        col = 'red')
#Manier 2
#AFHANKELIJK - ONAFHANKELIJK!
lm(afhankelijkeVar ~ onafhanekelijkeVar)
plot(x = onafhanekelijkeVar, xlab = "onafhankelijke",
y = afhankelijkeVar, ylab = "afhankelijke")
regression <- lm(afhankelijkeVar ~ onafhanekelijkeVar)
abline(regression,
col = 'red')
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ======================================== CovariantiÃ« en corrolatie =======================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv", sep ="")
# X - onafhankelijke var
x = data$ID
# Y - afhankelijke var
y = data$UserRating
# ---------------------------------------------- Berekeningen ----------------------------------------------
mx <- mean(x)
my <- mean(y)
plot(x,y)
abline(h = my, col = 'red')
abline(v = mx, col = 'red')
print("Covariantie")
cov(x, y)
print("CorolatiecoÃ«fficient")
correlation = cor(x, y)
correlation
regression <- lm(y ~ x)
abline(regression,
col = 'blue')
print("DeterminatiecoÃ«fficient")
correlation^2
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ======================================== CovariantiÃ« en corrolatie =======================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv")
# X - onafhankelijke var
x = data$x
# Y - afhankelijke var
y = data$y
# ---------------------------------------------- Berekeningen ----------------------------------------------
mx <- mean(x)
my <- mean(y)
plot(x,y)
abline(h = my, col = 'red')
abline(v = mx, col = 'red')
print("Covariantie")
cov(x, y)
print("CorolatiecoÃ«fficient")
correlation = cor(x, y)
correlation
regression <- lm(y ~ x)
abline(regression,
col = 'blue')
print("DeterminatiecoÃ«fficient")
correlation^2
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ======================================== CovariantiÃ« en corrolatie =======================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv")
# X - onafhankelijke var
x = data$ID
# Y - afhankelijke var
y = data$UserRating
# ---------------------------------------------- Berekeningen ----------------------------------------------
mx <- mean(x)
my <- mean(y)
plot(x,y)
abline(h = my, col = 'red')
abline(v = mx, col = 'red')
print("Covariantie")
cov(x, y)
print("CorolatiecoÃ«fficient")
correlation = cor(x, y)
correlation
regression <- lm(y ~ x)
abline(regression,
col = 'blue')
print("DeterminatiecoÃ«fficient")
correlation^2
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ============================================= T-test (dataset) ===========================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
read = read.csv('locatieFile')
#data = c(400,350,400,500,300,350,200,500,200,250,250,500,350,100)
data <- read.csv("C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\kids")
populatieGem =300
alpha = 0.05
# ---------------------------------------------- Berekeningen ----------------------------------------------
steekproefGem = mean(data)
print(paste('Steekproefgemiddelde: ',steekproefGem))
if(steekproefGem < populatieGem){
soort = "less"
}else{
soort = "greater"
}
test = t.test(data,alternative = soort,df = length(data) - 1,conf.level = 1-alpha,mu = populatieGem)
p = test$p.value
sd = sd(data)
g = populatieGem + qt(1-alpha,df=length(data) - 1)* sd/sqrt(length(data))
if(steekproefGem < populatieGem){
print("Eenzijdig links")
if(steekproefGem > g ){
print("H0 niet verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") > g (",g,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") < g (",g,") -> Steekproefgemiddelde ligt in verwerpingsgebied"))
verwerpenKritiekgeb = TRUE;
}
}else{
print("Eenzijdig rechts")
if(steekproefGem < g ){
print("H0 niet verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") < g (",g,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") > g (",g,") -> Steekproefgemiddelde ligt in verwerpingsgebied"))
verwerpenKritiekgeb = TRUE;
}
}
if(p < alpha){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= FALSE;
}
# Clearen: plot, console, environment
rm(list=ls())
cat("\014")
dev.off()
library(lsr)
# ============================================= T-test (dataset) ===========================================
# --------------------------------------------- Input Gegevens ---------------------------------------------
read = read.csv('C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\breakingbad.csv')
data = read
populatieGem =300
alpha = 0.05
# ---------------------------------------------- Berekeningen ----------------------------------------------
steekproefGem = mean(data)
print(paste('Steekproefgemiddelde: ',steekproefGem))
if(steekproefGem < populatieGem){
soort = "less"
}else{
soort = "greater"
}
test = t.test(data,alternative = soort,df = length(data) - 1,conf.level = 1-alpha,mu = populatieGem)
p = test$p.value
sd = sd(data)
g = populatieGem + qt(1-alpha,df=length(data) - 1)* sd/sqrt(length(data))
if(steekproefGem < populatieGem){
print("Eenzijdig links")
if(steekproefGem > g ){
print("H0 niet verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") > g (",g,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") < g (",g,") -> Steekproefgemiddelde ligt in verwerpingsgebied"))
verwerpenKritiekgeb = TRUE;
}
}else{
print("Eenzijdig rechts")
if(steekproefGem < g ){
print("H0 niet verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") < g (",g,") -> Steekproefgemiddelde ligt NIET in verwerpingsgebied"))
verwerpenKritiekgeb = FALSE;
}else{
print("H0 verwerpen!")
print(paste("Steekproefgemiddelde (",steekproefGem,") > g (",g,") -> Steekproefgemiddelde ligt in verwerpingsgebied"))
verwerpenKritiekgeb = TRUE;
}
}
if(p < alpha){
print("H0 verwerpen!")
print(paste("p-waarde (",p,") < significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= TRUE;
}else{
print("H0 niet verwerpen!")
print(paste("p-waarde (",p,") > significantieniveau (Î±)! (",alpha,")"))
verwerpenPWaarde= FALSE;
}
read = read.csv('C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\kids')
read = read.csv('C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\kids')
read = read.csv('C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\kids')
read = read.csv('C:\\Users\\tijsm\\Google Drive\\HoGent 2018-2019\\2e semester\\Onderzoekstechnieken\\proefexamen\\kids.csv')
data = table(read)
data
data = crossprod(read)
data
data = crossprod(read)
data = table(read$Race, read$Gender)
data
data = table(read$Race)
data
data = table(read$Sports)
data
